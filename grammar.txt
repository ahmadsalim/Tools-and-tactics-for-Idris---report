{- Header and Imports are currently parsed separatly -}
Main ::= ModuleHeader Import* Prog;

{-
  shortcut notation:
    ~CHARSEQ = complement of char sequence (i.e. any character except CHARSEQ)
    RULE? = optional rule (i.e. RULE or nothing)
    RULE* = repeated rule (i.e. RULE zero or more times)
    RULE+ = repeated rule with at least one match (i.e. RULE one or more times)
    RULE! = invalid rule (i.e. rule that is not valid in context, report meaningful error in case)
    RULE{n} = rule repeated n times
-}

EOL_t ::= '\n' | EOF_t;

StringChar_t* = {- Any valid Haskell string character or escape code -};
StringLiteral_t ::= '"' StringChar_t* '"';

DocCommentMarker_t ::= '|' | '^';

DocComment_t ::=   '--' DocCommentMarker_t ~EOL_t* EOL_t
                 | '{-' DocCommentMarket_t ~'-}'* '-}'
                 ;

SingleLineComment_t ::= '--' EOL_t
                  |     '--' ~DocCommentMarker_t ~EOL_t* EOL_t
                  ;

MultiLineComment_t ::=
  '{--}'
  | '{-' ~DocCommentMarker_t InCommentChars_t
  ;

InCommentChars_t ::=
  '-}'
  | MultiLineComment_t InCommentChars_t
  | ~'-}'+ InCommentChars_t
  ;


Whitespace_t ::=
  SimpleWhitespace_t
  | SingleLineComment_t
  | MultiLineComment_t
  ;

Identifier_t ::= ['a'-'z''A'-'Z']['a'-'z''A'-'Z''0'-'9''_''.']+;
Operator_t ::= [':''!''#''$''%''&''*''+''.''/''<''=''>''?''@''\\''^''|''-''~']+

ModuleHeader ::= 'module' Identifier_t ';'?;

Import ::= 'import' Identifier_t ';'?;

Prog ::= Decl* EOF;

Decl ::=
    Decl'
  | Using
  | Params
  | Mutual
  | Namespace
  | Class
  | Instance
  | DSL
  | Directive
  | Provider
  | Transform
  | Import!
  ;

Decl' ::=
    Fixity
  | FnDecl'
  | Data
  | Record
  | SyntaxDecl
  ;

SyntaxDecl ::= SyntaxRule;

SyntaxRuleOpts ::= 'term' | 'pattern';

SyntaxRule ::=
  SyntaxRuleOpts? 'syntax' SyntaxSym+ '=' TypeExpr Terminator;

SyntaxSym ::=   '[' Name_t ']'
             |  '{' Name_t '}'
             |  Name_t
             |  StringLiteral_t
             ;

FnDecl ::= FnDecl';

{- NOTE: Check compatible options -}
FnDecl' ::=
  DocComment_t? FnOpts* Accessibility? FnOpts* FnName TypeSig Terminator
  | Postulate
  | Pattern
  | CAF
  ;

Postulate ::=
  DocComment_t? 'postulate' FnOpts* Accesibility? FnOpts* FnName TypeSig Terminator
  ;

Using ::=
  'using' '(' UsingDeclList ')' OpenBlock Decl+ CloseBlock
  ;

Params ::=
  'parameters' '(' TypeDeclList ')' OpenBlock Decl+ CloseBlock
  ;

Mutual ::=
  'mutual' OpenBlock Decl+ CloseBlock
  ;

Namespace ::=
  'namespace' identifier OpenBlock Decl+ CloseBlock
  ;

Fixity ::=
  FixityType Natural_t OperatorList Terminator
  ;

FixityType ::=
  'infixl'
  | 'infixr'
  | 'infix'
  | 'prefix'
  ;

OperatorList ::=
  Operator_t
  | Operator_t ',' OperatorList
  ;

MethodsBlock ::= 'where' OpenBlock FnDecl* CloseBlock
           ;

Class ::=
  DocComment_t?  Accessibility? 'class' ConstraintList? Name ClassArgument* MethodsBlock?
  ;

ClassArgument ::=
   Name
   | '(' Name ':' Expr ')'
   ;

Instance ::=
  'instance' InstanceName? ConstraintList? Name SimpleExpr* MethodsBlock?
  ;

InstanceName ::= '[' Name ']';

FullExpr ::= Expr EOF_t;

Expr ::= Expr';

Expr' ::= {- External (User-defined) Syntax -}
      |   InternalExpr;

InternalExpr ::=
  App
  | MatchApp
  | UnifyLog
  | RecordType
  | SimpleExpr
  | Lambda
  | QuoteGoal
  | Let
  | RewriteTerm
  | Pi
  | DoBlock
  ;

Name ::= IName_t;

OperatorFront ::= (Identifier_t '.')? '(' Operator_t ')';

FnName ::= Name | OperatorFront;

Accessibility ::= 'public' | 'abstract' | 'private';

FnOpts ::= 'total'
  | 'partial'
  | 'implicit'
  | '%' 'assert_total'
  | '%' 'reflection'
  | '%' 'specialise' '[' NameTimesList? ']'
  ;

NameTimes ::= FnName Natural?;

NameTimesList ::=
  NameTimes
  | NameTimes ',' NameTimesList
  ;

CaseExpr ::=
  'case' Expr 'of' OpenBlock CaseOption+ CloseBlock;

CaseOption ::=
  Expr '=>' Expr Terminator
  ;


{- NOTE: Consider using OpenBlock CloseBlock for proofs and tactics -}
ProofExpr ::=
  'proof' OpenBlock Tactic'* CloseBlock
  ;

TacticsExpr :=
  'tactics' OpenBlock Tactic'* CloseBlock
;

Tactic' ::=
  Tactic Terminator
;


SimpleExpr ::=
  '![' Term ']'
  | '?' Name
  | % 'instance'
  | 'refl' ('{' Expr '}')?
  | ProofExpr
  | TacticsExpr
  | CaseExpr
  | FnName
  | List
  | Comprehension
  | Alt
  | Idiom
  | '(' Bracketed
  | Constant
  | Type
  | '_|_'
  | '_'
  | {- External (User-defined) Simple Expression -}
  ;

Bracketed ::=
  ')'
  | Expr ')'
  | ExprList ')'
  | Expr '**' Expr ')'
  | Operator Expr ')'
  | Expr Operator ')'
  | Name ':' Expr '**' Expr ')'
  ;



ListExpr ::=
  '[' ExprList? ']'
;

ExprList ::=
  Expr
  | Expr ',' ExprList
  ;

Alt ::= '(|' Expr_List '|)';

Expr_List ::=
  Expr'
  | Expr' ',' Expr_List
  ;

HSimpleExpr ::=
  '.' SimpleExpr
  | SimpleExpr
  ;

MatchApp ::=
  SimpleExpr '<==' FnName
  ;

UnifyLog ::=
  '%' 'unifyLog' SimpleExpr
  ;

App ::=
  'mkForeign' Arg Arg*
  | SimpleExpr Arg+
  ;

Arg ::=
  ImplicitArg
  | ConstraintArg
  | SimpleExpr
  ;

ImplicitArg ::=
  '{' Name ('=' Expr)? '}'
  ;

ConstraintArg ::=
  '@{' Expr '}'
  ;

RecordType ::=
  'record' '{' FieldTypeList '}';

FieldTypeList ::=
  FieldType
  | FieldType ',' FieldTypeList
  ;

FieldType ::=
  FnName '=' Expr
  ;

TypeSig ::=
  ':' Expr
  ;

TypeExpr ::= ConstraintList? Expr;

Lambda ::=
    '\\' TypeOptDeclList '=>' Expr
  | '\\' SimpleExprList  '=>' Expr
  ;

SimpleExprList ::=
  SimpleExpr
  | SimpleExpr ',' SimpleExprList
  ;

RewriteTerm ::= 
  'rewrite' Expr ('==>' Expr)? 'in' Expr
  ;

Let ::=
  'let' Name TypeSig'? '=' Expr 'in' Expr
| 'let' Expr'                '=' Expr' 'in' Expr

TypeSig' ::=
  ':' Expr'
  ;

QuoteGoal ::=
  'quoteGoal' Name 'by' Expr 'in' Expr
  ;

Pi ::=
    '|'? Static? '('           TypeDeclList ')' DocComment '->' Expr
  | '|'? Static? '{'           TypeDeclList '}'            '->' Expr
  |              '{' 'auto'    TypeDeclList '}'            '->' Expr
  |              '{' 'default' TypeDeclList '}'            '->' Expr
  |              '{' 'static'               '}' Expr'      '->' Expr
  ;

ConstraintList ::=
    '(' Expr_List ')' '=>'
  | Expr              '=>'
  ;

UsingDeclList ::=
  UsingDeclList'
  | NameList TypeSig
  ;

UsingDeclList' ::=
  UsingDecl
  | UsingDecl ',' UsingDeclList'
  ;

NameList ::=
  Name
  | Name ',' NameList
  ;

UsingDecl ::=
  FnName TypeSig
  | FnName FnName+
  ;

TypeDeclList ::=
    FunctionSignatureList
  | NameList TypeSig
  ;

FunctionSignatureList ::=
    Name TypeSig
  | Name TypeSig ',' FunctionSignatureList
  ;

TypeOptDeclList ::=
    NameOrPlaceholder TypeSig?
  | NameOrPlaceholder TypeSig? ',' TypeOptDeclList
  ;

NameOrPlaceHolder ::= Name | '_';

Comprehension ::= '[' Expr '|' DoList ']';

DoList ::=
    Do
  | Do ',' DoList
  ;

Do' ::= Do Terminator;

DoBlock ::=
  'do' OpenBlock Do'+ CloseBlock
  ;

Do ::=
    'let' Name  TypeSig? '=' Expr
  | 'let' Expr'                '=' Expr
  | Name  '<-' Expr
  | Expr' '<-' Expr
  | Expr
  ;

Idiom ::= '[|' Expr '|]';

Constant ::=
    'Integer'
  | 'Int'
  | 'Char'
  | 'Float'
  | 'String'
  | 'Ptr'
  | 'Bits8'
  | 'Bits16'
  | 'Bits32'
  | 'Bits64'
  | 'Bits8x16'
  | 'Bits16x8'
  | 'Bits32x4'
  | 'Bits64x2'
  | Float_t
  | Natural_t
  | String_t
  | Char_t
  ;

Static ::=
  '[' static ']'
;

Record ::=
    DocComment Accessibility? 'record' FnName TypeSig 'where' OpenBlock Constructor Terminator CloseBlock;

DataI ::= 'data' | 'codata';

Data ::= DocComment? Accessibility? DataI FnName TypeSig ExplicitTypeDataRest?
       | DocComment? Accessibility? DataI FnName Name*   DataRest?
       ;

Constructor' ::= Constructor Terminator;

ExplicitTypeDataRest ::= 'where' OpenBlock Constructor'* CloseBlock;

DataRest ::= '=' SimpleConstructorList Terminator
            | 'where'!
           ;

SimpleConstructorList ::=
    SimpleConstructor
  | SimpleConstructor '|' SimpleConstructorList
  ;

Constructor ::= DocComment? FnName TypeSig;
SimpleConstructor ::= FnName SimpleExpr* DocComment?

Overload' ::= Overload Terminator;

DSL ::= 'dsl' FnName OpenBlock Overload'+ CloseBlock;

OverloadIdentifier ::= 'let' | Identifier;

Overload ::= OverloadIdentifier '=' Expr;

Pattern ::= Clause;

CAF ::= 'let' FnName '=' Expr Terminator;

ArgExpr ::= HSimpleExpr | {- In Pattern External (User-defined) Expression -};

ImplicitOrArgExpr ::= ImplicitArg | ArgExpr;

RHS ::= '='            Expr
     |  '?='  RHSName? Expr
     | 'impossible'
     ;

RHSName ::= '{' FnName '}';

RHSOrWithBlock ::= RHS WhereOrTerminator
               | 'with' SimpleExpr OpenBlock FnDecl+ CloseBlock
               ;

Clause ::=                                                               WExpr+ RHSOrWithBlock
       |   SimpleExpr '<=='  FnName                                             RHS WhereOrTerminator
       |                     FnName ConstraintArg* ImplicitOrArgExpr*    WExpr* RHSOrWithBlock
       |   ArgExpr Operator ArgExpr                                      WExpr* RHSOrWithBlock
       ;


WhereOrTerminator ::= WhereBlock | Terminator;

WExpr ::= '|' Expr';

WhereBlock ::= 'where' OpenBlock Decl+ CloseBlock;

Codegen ::= 'C'
        |   'Java'
        |   'JavaScript'
        |   'Node'
        |   'LLVM'
        |   'Bytecode'
        ;

Totality ::= 'partial' | 'total'

StringList ::=
  String
  | String ',' StringList
  ;

Directive ::= '%' Directive';

Directive' ::= 'lib'      CodeGen String_t
           |   'link'     CodeGen String_t
           |   'flag'     CodeGen String_t
           |   'include'  CodeGen String_t
           |   'hide'     Name
           |   'freeze'   Name
           |   'access'   Accessibility
           |   'default'  Totality
           |   'logging'  Natural
           |   'dynamic'  StringList
           |   'language' 'TypeProviders'
           ;

Provider ::= '%' 'provide' '(' FnName TypeSig ')' 'with' Expr;

Transform ::= '%' 'transform' Expr '==>' Expr

Tactic ::= 'intro' NameList?
       |   'intros'
       |   'refine'      Name Imp+
       |   'mrefine'     Name
       |   'rewrite'     Expr
       |   'equiv'       Expr
       |   'let'         Name ':' Expr' '=' Expr
       |   'let'         Name           '=' Expr
       |   'focus'       Name
       |   'exact'       Expr
       |   'applyTactic' Expr
       |   'reflect'     Expr
       |   'fill'        Expr
       |   'try'         Tactic '|' Tactic
       |   '{' TacticSeq '}'
       |   'compute'
       |   'trivial'
       |   'solve'
       |   'attack'
       |   'state'
       |   'term'
       |   'undo'
       |   'qed'
       |   'abandon'
       |   ':' 'q'
       ;

Imp ::= '?' | '_';

TacticSeq ::= 
    Tactic ';' Tactic
  | Tactic ';' TacticSeq
  ;

{- Open Block Close Block should match i.e. either {} or indentation -}

OpenBlock ::= '{' 
          | {- Same Indentation Level Or Greater -}
          ;

CloseBlock ::= '}'
           | {- Smaller Indentation Level Than Before -}
           ;

Terminator ::= ';'
           |  {- Smaller inden than before -}
           |  {- '|', ')' or '}' is at start of input -}
           |  eof
           ;

Float_t ::= {- Float literal similar to Haskell -}
         ;

IName_t ::= {- Any valid identifier except keywords possibly prefixed with a namespace -}
      ;

Integer_t ::= {- Integer literal similar to Haskell -}
      ;

Char_t ::= {- Char literal similar to Haskell -}
      ;

Natural_t ::= {- Natural number literal i.e. [1-9]*[0-9] -}
          ;
